#server port
server.port=1313

#CONNECTION WITH DATABASE

#URL to connect with SQL DB -jdbc:mysql://: protocol -localhost:3001: host with port(port is ok to not put, but is better to use)
#/greffoodb: schema name, db name to connect
#need to configure timezone to UTC, it's a rule, good practice with date and time
spring.datasource.url=jdbc:mysql://localhost:3001/greffoodb?createDatabaseIfNotExist=true&serverTimezone=UTC

#NAME of user db
spring.datasource.name=Greffroot

#PASSWORD of user db
spring.datasource.password=10210202

#JPA

#this is a way to auto-generate tables at DB, is cool to use in dev, locally. But in production is never an option don't do it
#spring.jpa.generate-ddl=true
#drop all tables and recreate always when run app again
#spring.jpa.hibernate.ddl-auto=create good to test, development, not good in production, never use

#schema generation is not good in production, only for testing and prototyping
#spring.jpa.hibernate.ddl-auto=update

#incase that engine of DB SQL is wrong, to be correct is common to use InnoDB, helps to create Foreign Key correctly,
# can use CTRL + N to search like MySQL*Dialect, get the right import like that below and class name, and done
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect

#to show sql in terminal, to see better
spring.jpa.show-sql=true

#to show sql formatted, better to see in terminal
spring.jpa.properties.hibernate.format_sql=true

#these properties they're not mapped in spring boot configuration, but we can use this in here
#need to use this one time, if leave like this, will create a tons of it
#this property means that will generate scripts SQL, auto generation schemas
#spring.jpa.properties.javax.persistence.schema-generation.scripts.action=create
#defining path of which directory it will generate schemas scripts
#spring.jpa.properties.javax.persistence.schema-generation.scripts.create-target=src/main/resources/V010__ddl.sql

#specify which location, path that flyway find migrations scripts and callback scripts too
#classpath: inside of application project, which is src/main/java and src/main/resource
#will run both if used this property, in dev can use this in profile, to run this data directory
#prod will not have this property and by default will run only db/migration, so data directory will not intervene
spring.flyway.locations=classpath:db/migration,classpath:db/data

#HIKARI

#defining max connections that hikari will deal, pool connections this is the max number of connections that it can deal at sametime
#if I don't do anything about idle, this property will do both
#spring.datasource.hikari.maximum-pool-size=5
#defining min idle connections that hikari will deal, pool connections. idle is that connection that is waiting for request
#spring.datasource.hikari.minimum-idle=3
#miliseconds, timeout to idle that create, like if it has 5 idles open, will wait 10 secs to close
#spring.datasource.hikari.idle-timeout=10000

#SPRING MVC

#to show in console spring MVC errors handled
logging.level.org.springframework.web.servlet.mvc=trace
#this property's to throw NoHandlerFoundException, because spring don't do it automatically, setting to true
spring.mvc.throw-exception-if-no-handler-found=true
#disabling spring resource handler, which handles static stuff, like images or something like. with that enable no-handler will not work
spring.web.resources.add-mappings=false


#JACKSON - DESERIALIZATION

#when deserialize a property to instance a java property, if come with unknown field and value, will fail, set to true
spring.jackson.deserialization.fail-on-unknown-properties=true
#if property exists but if it's a JsonIgnore value, will fail, set to true
spring.jackson.deserialization.fail-on-ignored-properties=true
#to change strategy like camelCase or snake_case
#spring.jackson.property-naming-strategy=SNAKE_CASE

#server port
server.port=1313

#CONNECTION WITH DATABASE

#URL to connect with SQL DB -jdbc:mysql://: protocol -localhost:3001: host with port(port is ok to not put, but is better to use) -/greffoodb: schema name, db name to connect
spring.datasource.url=jdbc:mysql://localhost:3001/greffoodb?createDatabaseIfNotExist=true

#NAME of user db
spring.datasource.name=Greffroot

#PASSWORD of user db
spring.datasource.password=10210202

#JPA

#this is a way to auto-generate tables at DB, is cool to use in dev, locally. But in production is never an option don't do it
#spring.jpa.generate-ddl=true
#drop all tables and recreate always when run app again
#spring.jpa.hibernate.ddl-auto=create good to test, development, not good in production, never use

#schema generatation is not good in production, only for testing and prototyping
#spring.jpa.hibernate.ddl-auto=update

#incase that engine of DB SQL is wrong, to be correct is common to use InnoDB, helps to create Foreign Key correctly,
# can use CTRL + N to search like MySQL*Dialect, get the right import like that below and class name, and done
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect

#to show sql in terminal, to see better
spring.jpa.show-sql=true

#to show sql formatted, better to see in terminal
spring.jpa.properties.hibernate.format_sql=true

#these properties they're not mapped in spring boot configuration, but we can use this in here]
#need to use this one time, if leave like this, will create a tons of it
#this property means that will generate scripts SQL, auto generation schemas
#spring.jpa.properties.javax.persistence.schema-generation.scripts.action=create
#defining path of which directory it will generate schemas scripts
#spring.jpa.properties.javax.persistence.schema-generation.scripts.create-target=src/main/resources/V010__ddl.sql


#HIKARI

#defining max connections that hikari will deal, pool connections this is the max number of connections that it can deal at sametime
#if I don't do anything about idle, this property will do both
#spring.datasource.hikari.maximum-pool-size=5
#defining min idle connections that hikari will deal, pool connections. idle is that connection that is waiting for request
#spring.datasource.hikari.minimum-idle=3
#miliseconds, timeout to idle that create, like if it has 5 idles open, will wait 10 secs to close
#spring.datasource.hikari.idle-timeout=10000